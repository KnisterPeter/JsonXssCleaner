JsonXssCleaner = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "array": parse_array,
        "digit": parse_digit,
        "hashEntity": parse_hashEntity,
        "hex": parse_hex,
        "number": parse_number,
        "object": parse_object,
        "string": parse_string,
        "value": parse_value,
        "ws": parse_ws
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "value";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_value() {
        var cacheKey = 'value@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result10 = parse_string();
        if (result10 !== null) {
          var result2 = result10;
        } else {
          var result9 = parse_number();
          if (result9 !== null) {
            var result2 = result9;
          } else {
            var result8 = parse_object();
            if (result8 !== null) {
              var result2 = result8;
            } else {
              var result7 = parse_array();
              if (result7 !== null) {
                var result2 = result7;
              } else {
                if (input.substr(pos, 4) === "true") {
                  var result6 = "true";
                  pos += 4;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"true\"");
                  }
                }
                if (result6 !== null) {
                  var result2 = result6;
                } else {
                  if (input.substr(pos, 5) === "false") {
                    var result5 = "false";
                    pos += 5;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"false\"");
                    }
                  }
                  if (result5 !== null) {
                    var result2 = result5;
                  } else {
                    if (input.substr(pos, 4) === "null") {
                      var result4 = "null";
                      pos += 4;
                    } else {
                      var result4 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"null\"");
                      }
                    }
                    if (result4 !== null) {
                      var result2 = result4;
                    } else {
                      var result2 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        if (result2 !== null) {
          var result3 = parse_ws();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(value) { return value })(result1[0])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_object() {
        var cacheKey = 'object@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result2 = "{";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_ws();
          if (result3 !== null) {
            var savedPos1 = pos;
            var result9 = parse_string();
            if (result9 !== null) {
              var result10 = parse_ws();
              if (result10 !== null) {
                if (input.substr(pos, 1) === ":") {
                  var result11 = ":";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\":\"");
                  }
                }
                if (result11 !== null) {
                  var result12 = parse_ws();
                  if (result12 !== null) {
                    var result13 = parse_value();
                    if (result13 !== null) {
                      var result14 = [];
                      var savedPos2 = pos;
                      var result17 = parse_ws();
                      if (result17 !== null) {
                        if (input.substr(pos, 1) === ",") {
                          var result18 = ",";
                          pos += 1;
                        } else {
                          var result18 = null;
                          if (reportMatchFailures) {
                            matchFailed("\",\"");
                          }
                        }
                        if (result18 !== null) {
                          var result19 = parse_ws();
                          if (result19 !== null) {
                            var result20 = parse_string();
                            if (result20 !== null) {
                              var result21 = parse_ws();
                              if (result21 !== null) {
                                if (input.substr(pos, 1) === ":") {
                                  var result22 = ":";
                                  pos += 1;
                                } else {
                                  var result22 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\":\"");
                                  }
                                }
                                if (result22 !== null) {
                                  var result23 = parse_ws();
                                  if (result23 !== null) {
                                    var result24 = parse_value();
                                    if (result24 !== null) {
                                      var result16 = [result17, result18, result19, result20, result21, result22, result23, result24];
                                    } else {
                                      var result16 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result16 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result16 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result16 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result16 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result16 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result16 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result16 = null;
                        pos = savedPos2;
                      }
                      var result15 = result16 !== null
                        ? (function(string, value) { return "," + string + ":" + value })(result16[3], result16[7])
                        : null;
                      while (result15 !== null) {
                        result14.push(result15);
                        var savedPos2 = pos;
                        var result17 = parse_ws();
                        if (result17 !== null) {
                          if (input.substr(pos, 1) === ",") {
                            var result18 = ",";
                            pos += 1;
                          } else {
                            var result18 = null;
                            if (reportMatchFailures) {
                              matchFailed("\",\"");
                            }
                          }
                          if (result18 !== null) {
                            var result19 = parse_ws();
                            if (result19 !== null) {
                              var result20 = parse_string();
                              if (result20 !== null) {
                                var result21 = parse_ws();
                                if (result21 !== null) {
                                  if (input.substr(pos, 1) === ":") {
                                    var result22 = ":";
                                    pos += 1;
                                  } else {
                                    var result22 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\":\"");
                                    }
                                  }
                                  if (result22 !== null) {
                                    var result23 = parse_ws();
                                    if (result23 !== null) {
                                      var result24 = parse_value();
                                      if (result24 !== null) {
                                        var result16 = [result17, result18, result19, result20, result21, result22, result23, result24];
                                      } else {
                                        var result16 = null;
                                        pos = savedPos2;
                                      }
                                    } else {
                                      var result16 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result16 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result16 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result16 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result16 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result16 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result16 = null;
                          pos = savedPos2;
                        }
                        var result15 = result16 !== null
                          ? (function(string, value) { return "," + string + ":" + value })(result16[3], result16[7])
                          : null;
                      }
                      if (result14 !== null) {
                        var result8 = [result9, result10, result11, result12, result13, result14];
                      } else {
                        var result8 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
            var result7 = result8 !== null
              ? (function(string, value, next) { return string + ":" + value + next.join('') })(result8[0], result8[4], result8[5])
              : null;
            var result4 = result7 !== null ? result7 : '';
            if (result4 !== null) {
              var result5 = parse_ws();
              if (result5 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result6 = "}";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(kv) { return "{" + kv + "}" })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_array() {
        var cacheKey = 'array@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result2 = "[";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_ws();
          if (result3 !== null) {
            var savedPos1 = pos;
            var result9 = parse_value();
            if (result9 !== null) {
              var result10 = [];
              var savedPos2 = pos;
              var result13 = parse_ws();
              if (result13 !== null) {
                if (input.substr(pos, 1) === ",") {
                  var result14 = ",";
                  pos += 1;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result14 !== null) {
                  var result15 = parse_ws();
                  if (result15 !== null) {
                    var result16 = parse_value();
                    if (result16 !== null) {
                      var result12 = [result13, result14, result15, result16];
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos2;
                }
              } else {
                var result12 = null;
                pos = savedPos2;
              }
              var result11 = result12 !== null
                ? (function(value) { return "," + value })(result12[3])
                : null;
              while (result11 !== null) {
                result10.push(result11);
                var savedPos2 = pos;
                var result13 = parse_ws();
                if (result13 !== null) {
                  if (input.substr(pos, 1) === ",") {
                    var result14 = ",";
                    pos += 1;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result14 !== null) {
                    var result15 = parse_ws();
                    if (result15 !== null) {
                      var result16 = parse_value();
                      if (result16 !== null) {
                        var result12 = [result13, result14, result15, result16];
                      } else {
                        var result12 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos2;
                }
                var result11 = result12 !== null
                  ? (function(value) { return "," + value })(result12[3])
                  : null;
              }
              if (result10 !== null) {
                var result8 = [result9, result10];
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
            var result7 = result8 !== null
              ? (function(value, next) { return value + next.join('') })(result8[0], result8[1])
              : null;
            var result4 = result7 !== null ? result7 : '';
            if (result4 !== null) {
              var result5 = parse_ws();
              if (result5 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result6 = "]";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(elements) { return "[" + elements + "]" })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string() {
        var cacheKey = 'string@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result44 = parse_hashEntity();
          if (result44 !== null) {
            var result5 = result44;
          } else {
            if (input.substr(pos).match(/^[^"\\'`<>]/) !== null) {
              var result43 = input.charAt(pos);
              pos++;
            } else {
              var result43 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"\\\\'`<>]");
              }
            }
            if (result43 !== null) {
              var result5 = result43;
            } else {
              if (input.substr(pos, 1) === "<") {
                var result42 = "<";
                pos += 1;
              } else {
                var result42 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<\"");
                }
              }
              if (result42 !== null) {
                var result40 = result42;
              } else {
                if (input.substr(pos, 1) === "<") {
                  var result41 = "<";
                  pos += 1;
                } else {
                  var result41 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<\"");
                  }
                }
                if (result41 !== null) {
                  var result40 = result41;
                } else {
                  var result40 = null;;
                };
              }
              var result39 = result40 !== null
                ? (function() { return "&lt;" })()
                : null;
              if (result39 !== null) {
                var result5 = result39;
              } else {
                if (input.substr(pos, 1) === ">") {
                  var result38 = ">";
                  pos += 1;
                } else {
                  var result38 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">\"");
                  }
                }
                if (result38 !== null) {
                  var result36 = result38;
                } else {
                  if (input.substr(pos, 1) === ">") {
                    var result37 = ">";
                    pos += 1;
                  } else {
                    var result37 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">\"");
                    }
                  }
                  if (result37 !== null) {
                    var result36 = result37;
                  } else {
                    var result36 = null;;
                  };
                }
                var result35 = result36 !== null
                  ? (function() { return "&gt;" })()
                  : null;
                if (result35 !== null) {
                  var result5 = result35;
                } else {
                  if (input.substr(pos, 1) === "'") {
                    var result34 = "'";
                    pos += 1;
                  } else {
                    var result34 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"'\"");
                    }
                  }
                  if (result34 !== null) {
                    var result32 = result34;
                  } else {
                    if (input.substr(pos, 1) === "'") {
                      var result33 = "'";
                      pos += 1;
                    } else {
                      var result33 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"'\"");
                      }
                    }
                    if (result33 !== null) {
                      var result32 = result33;
                    } else {
                      var result32 = null;;
                    };
                  }
                  var result31 = result32 !== null
                    ? (function() { return "&apos;" })()
                    : null;
                  if (result31 !== null) {
                    var result5 = result31;
                  } else {
                    if (input.substr(pos, 1) === "`") {
                      var result30 = "`";
                      pos += 1;
                    } else {
                      var result30 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"`\"");
                      }
                    }
                    if (result30 !== null) {
                      var result28 = result30;
                    } else {
                      if (input.substr(pos, 1) === "`") {
                        var result29 = "`";
                        pos += 1;
                      } else {
                        var result29 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"`\"");
                        }
                      }
                      if (result29 !== null) {
                        var result28 = result29;
                      } else {
                        var result28 = null;;
                      };
                    }
                    var result27 = result28 !== null
                      ? (function() { return "&#96;" })()
                      : null;
                    if (result27 !== null) {
                      var result5 = result27;
                    } else {
                      if (input.substr(pos, 2) === "\\\"") {
                        var result26 = "\\\"";
                        pos += 2;
                      } else {
                        var result26 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"\\\\\\\"\"");
                        }
                      }
                      if (result26 !== null) {
                        var result24 = result26;
                      } else {
                        if (input.substr(pos, 2) === "\\\"") {
                          var result25 = "\\\"";
                          pos += 2;
                        } else {
                          var result25 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"\\\\\\\"\"");
                          }
                        }
                        if (result25 !== null) {
                          var result24 = result25;
                        } else {
                          var result24 = null;;
                        };
                      }
                      var result23 = result24 !== null
                        ? (function() { return "&quot;" })()
                        : null;
                      if (result23 !== null) {
                        var result5 = result23;
                      } else {
                        var savedPos1 = pos;
                        if (input.substr(pos, 1) === "\\") {
                          var result8 = "\\";
                          pos += 1;
                        } else {
                          var result8 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"\\\\\"");
                          }
                        }
                        if (result8 !== null) {
                          if (input.substr(pos, 1) === "\\") {
                            var result22 = "\\";
                            pos += 1;
                          } else {
                            var result22 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"\\\\\"");
                            }
                          }
                          if (result22 !== null) {
                            var result9 = result22;
                          } else {
                            if (input.substr(pos, 1) === "/") {
                              var result21 = "/";
                              pos += 1;
                            } else {
                              var result21 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"/\"");
                              }
                            }
                            if (result21 !== null) {
                              var result9 = result21;
                            } else {
                              if (input.substr(pos, 1) === "b") {
                                var result20 = "b";
                                pos += 1;
                              } else {
                                var result20 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"b\"");
                                }
                              }
                              if (result20 !== null) {
                                var result9 = result20;
                              } else {
                                if (input.substr(pos, 1) === "f") {
                                  var result19 = "f";
                                  pos += 1;
                                } else {
                                  var result19 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"f\"");
                                  }
                                }
                                if (result19 !== null) {
                                  var result9 = result19;
                                } else {
                                  if (input.substr(pos, 1) === "n") {
                                    var result18 = "n";
                                    pos += 1;
                                  } else {
                                    var result18 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"n\"");
                                    }
                                  }
                                  if (result18 !== null) {
                                    var result9 = result18;
                                  } else {
                                    if (input.substr(pos, 1) === "r") {
                                      var result17 = "r";
                                      pos += 1;
                                    } else {
                                      var result17 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"r\"");
                                      }
                                    }
                                    if (result17 !== null) {
                                      var result9 = result17;
                                    } else {
                                      if (input.substr(pos, 1) === "t") {
                                        var result16 = "t";
                                        pos += 1;
                                      } else {
                                        var result16 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"t\"");
                                        }
                                      }
                                      if (result16 !== null) {
                                        var result9 = result16;
                                      } else {
                                        var savedPos2 = pos;
                                        if (input.substr(pos, 1) === "u") {
                                          var result11 = "u";
                                          pos += 1;
                                        } else {
                                          var result11 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"u\"");
                                          }
                                        }
                                        if (result11 !== null) {
                                          var result12 = parse_hex();
                                          if (result12 !== null) {
                                            var result13 = parse_hex();
                                            if (result13 !== null) {
                                              var result14 = parse_hex();
                                              if (result14 !== null) {
                                                var result15 = parse_hex();
                                                if (result15 !== null) {
                                                  var result10 = [result11, result12, result13, result14, result15];
                                                } else {
                                                  var result10 = null;
                                                  pos = savedPos2;
                                                }
                                              } else {
                                                var result10 = null;
                                                pos = savedPos2;
                                              }
                                            } else {
                                              var result10 = null;
                                              pos = savedPos2;
                                            }
                                          } else {
                                            var result10 = null;
                                            pos = savedPos2;
                                          }
                                        } else {
                                          var result10 = null;
                                          pos = savedPos2;
                                        }
                                        if (result10 !== null) {
                                          var result9 = result10;
                                        } else {
                                          var result9 = null;;
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          }
                          if (result9 !== null) {
                            var result7 = [result8, result9];
                          } else {
                            var result7 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result7 = null;
                          pos = savedPos1;
                        }
                        var result6 = result7 !== null
                          ? (function(c) { return '\\' + c })(result7[1])
                          : null;
                        if (result6 !== null) {
                          var result5 = result6;
                        } else {
                          var result5 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            var result44 = parse_hashEntity();
            if (result44 !== null) {
              var result5 = result44;
            } else {
              if (input.substr(pos).match(/^[^"\\'`<>]/) !== null) {
                var result43 = input.charAt(pos);
                pos++;
              } else {
                var result43 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\"\\\\'`<>]");
                }
              }
              if (result43 !== null) {
                var result5 = result43;
              } else {
                if (input.substr(pos, 1) === "<") {
                  var result42 = "<";
                  pos += 1;
                } else {
                  var result42 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<\"");
                  }
                }
                if (result42 !== null) {
                  var result40 = result42;
                } else {
                  if (input.substr(pos, 1) === "<") {
                    var result41 = "<";
                    pos += 1;
                  } else {
                    var result41 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"<\"");
                    }
                  }
                  if (result41 !== null) {
                    var result40 = result41;
                  } else {
                    var result40 = null;;
                  };
                }
                var result39 = result40 !== null
                  ? (function() { return "&lt;" })()
                  : null;
                if (result39 !== null) {
                  var result5 = result39;
                } else {
                  if (input.substr(pos, 1) === ">") {
                    var result38 = ">";
                    pos += 1;
                  } else {
                    var result38 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">\"");
                    }
                  }
                  if (result38 !== null) {
                    var result36 = result38;
                  } else {
                    if (input.substr(pos, 1) === ">") {
                      var result37 = ">";
                      pos += 1;
                    } else {
                      var result37 = null;
                      if (reportMatchFailures) {
                        matchFailed("\">\"");
                      }
                    }
                    if (result37 !== null) {
                      var result36 = result37;
                    } else {
                      var result36 = null;;
                    };
                  }
                  var result35 = result36 !== null
                    ? (function() { return "&gt;" })()
                    : null;
                  if (result35 !== null) {
                    var result5 = result35;
                  } else {
                    if (input.substr(pos, 1) === "'") {
                      var result34 = "'";
                      pos += 1;
                    } else {
                      var result34 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"'\"");
                      }
                    }
                    if (result34 !== null) {
                      var result32 = result34;
                    } else {
                      if (input.substr(pos, 1) === "'") {
                        var result33 = "'";
                        pos += 1;
                      } else {
                        var result33 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"'\"");
                        }
                      }
                      if (result33 !== null) {
                        var result32 = result33;
                      } else {
                        var result32 = null;;
                      };
                    }
                    var result31 = result32 !== null
                      ? (function() { return "&apos;" })()
                      : null;
                    if (result31 !== null) {
                      var result5 = result31;
                    } else {
                      if (input.substr(pos, 1) === "`") {
                        var result30 = "`";
                        pos += 1;
                      } else {
                        var result30 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"`\"");
                        }
                      }
                      if (result30 !== null) {
                        var result28 = result30;
                      } else {
                        if (input.substr(pos, 1) === "`") {
                          var result29 = "`";
                          pos += 1;
                        } else {
                          var result29 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"`\"");
                          }
                        }
                        if (result29 !== null) {
                          var result28 = result29;
                        } else {
                          var result28 = null;;
                        };
                      }
                      var result27 = result28 !== null
                        ? (function() { return "&#96;" })()
                        : null;
                      if (result27 !== null) {
                        var result5 = result27;
                      } else {
                        if (input.substr(pos, 2) === "\\\"") {
                          var result26 = "\\\"";
                          pos += 2;
                        } else {
                          var result26 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"\\\\\\\"\"");
                          }
                        }
                        if (result26 !== null) {
                          var result24 = result26;
                        } else {
                          if (input.substr(pos, 2) === "\\\"") {
                            var result25 = "\\\"";
                            pos += 2;
                          } else {
                            var result25 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"\\\\\\\"\"");
                            }
                          }
                          if (result25 !== null) {
                            var result24 = result25;
                          } else {
                            var result24 = null;;
                          };
                        }
                        var result23 = result24 !== null
                          ? (function() { return "&quot;" })()
                          : null;
                        if (result23 !== null) {
                          var result5 = result23;
                        } else {
                          var savedPos1 = pos;
                          if (input.substr(pos, 1) === "\\") {
                            var result8 = "\\";
                            pos += 1;
                          } else {
                            var result8 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"\\\\\"");
                            }
                          }
                          if (result8 !== null) {
                            if (input.substr(pos, 1) === "\\") {
                              var result22 = "\\";
                              pos += 1;
                            } else {
                              var result22 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"\\\\\"");
                              }
                            }
                            if (result22 !== null) {
                              var result9 = result22;
                            } else {
                              if (input.substr(pos, 1) === "/") {
                                var result21 = "/";
                                pos += 1;
                              } else {
                                var result21 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"/\"");
                                }
                              }
                              if (result21 !== null) {
                                var result9 = result21;
                              } else {
                                if (input.substr(pos, 1) === "b") {
                                  var result20 = "b";
                                  pos += 1;
                                } else {
                                  var result20 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"b\"");
                                  }
                                }
                                if (result20 !== null) {
                                  var result9 = result20;
                                } else {
                                  if (input.substr(pos, 1) === "f") {
                                    var result19 = "f";
                                    pos += 1;
                                  } else {
                                    var result19 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"f\"");
                                    }
                                  }
                                  if (result19 !== null) {
                                    var result9 = result19;
                                  } else {
                                    if (input.substr(pos, 1) === "n") {
                                      var result18 = "n";
                                      pos += 1;
                                    } else {
                                      var result18 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"n\"");
                                      }
                                    }
                                    if (result18 !== null) {
                                      var result9 = result18;
                                    } else {
                                      if (input.substr(pos, 1) === "r") {
                                        var result17 = "r";
                                        pos += 1;
                                      } else {
                                        var result17 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"r\"");
                                        }
                                      }
                                      if (result17 !== null) {
                                        var result9 = result17;
                                      } else {
                                        if (input.substr(pos, 1) === "t") {
                                          var result16 = "t";
                                          pos += 1;
                                        } else {
                                          var result16 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"t\"");
                                          }
                                        }
                                        if (result16 !== null) {
                                          var result9 = result16;
                                        } else {
                                          var savedPos2 = pos;
                                          if (input.substr(pos, 1) === "u") {
                                            var result11 = "u";
                                            pos += 1;
                                          } else {
                                            var result11 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"u\"");
                                            }
                                          }
                                          if (result11 !== null) {
                                            var result12 = parse_hex();
                                            if (result12 !== null) {
                                              var result13 = parse_hex();
                                              if (result13 !== null) {
                                                var result14 = parse_hex();
                                                if (result14 !== null) {
                                                  var result15 = parse_hex();
                                                  if (result15 !== null) {
                                                    var result10 = [result11, result12, result13, result14, result15];
                                                  } else {
                                                    var result10 = null;
                                                    pos = savedPos2;
                                                  }
                                                } else {
                                                  var result10 = null;
                                                  pos = savedPos2;
                                                }
                                              } else {
                                                var result10 = null;
                                                pos = savedPos2;
                                              }
                                            } else {
                                              var result10 = null;
                                              pos = savedPos2;
                                            }
                                          } else {
                                            var result10 = null;
                                            pos = savedPos2;
                                          }
                                          if (result10 !== null) {
                                            var result9 = result10;
                                          } else {
                                            var result9 = null;;
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            }
                            if (result9 !== null) {
                              var result7 = [result8, result9];
                            } else {
                              var result7 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result7 = null;
                            pos = savedPos1;
                          }
                          var result6 = result7 !== null
                            ? (function(c) { return '\\' + c })(result7[1])
                            : null;
                          if (result6 !== null) {
                            var result5 = result6;
                          } else {
                            var result5 = null;;
                          };
                        };
                      };
                    };
                  };
                };
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(chars) { return '"' + chars.join('') + '"' })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_hashEntity() {
        var cacheKey = 'hashEntity@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "&#") {
          var result2 = "&#";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"&#\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_ws();
          if (result3 !== null) {
            var savedPos3 = pos;
            if (input.substr(pos).match(/^[1-9]/) !== null) {
              var result21 = input.charAt(pos);
              pos++;
            } else {
              var result21 = null;
              if (reportMatchFailures) {
                matchFailed("[1-9]");
              }
            }
            if (result21 !== null) {
              var result22 = [];
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result23 = input.charAt(pos);
                pos++;
              } else {
                var result23 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              while (result23 !== null) {
                result22.push(result23);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result23 = input.charAt(pos);
                  pos++;
                } else {
                  var result23 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
              if (result22 !== null) {
                var result20 = [result21, result22];
              } else {
                var result20 = null;
                pos = savedPos3;
              }
            } else {
              var result20 = null;
              pos = savedPos3;
            }
            var result19 = result20 !== null
              ? (function(head, tail) { return [10, head + tail.join('')] })(result20[0], result20[1])
              : null;
            if (result19 !== null) {
              var result4 = result19;
            } else {
              var savedPos2 = pos;
              if (input.substr(pos).match(/^[Xx]/) !== null) {
                var result15 = input.charAt(pos);
                pos++;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("[Xx]");
                }
              }
              if (result15 !== null) {
                var result16 = parse_ws();
                if (result16 !== null) {
                  if (input.substr(pos).match(/^[0-9A-Fa-f]/) !== null) {
                    var result18 = input.charAt(pos);
                    pos++;
                  } else {
                    var result18 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9A-Fa-f]");
                    }
                  }
                  if (result18 !== null) {
                    var result17 = [];
                    while (result18 !== null) {
                      result17.push(result18);
                      if (input.substr(pos).match(/^[0-9A-Fa-f]/) !== null) {
                        var result18 = input.charAt(pos);
                        pos++;
                      } else {
                        var result18 = null;
                        if (reportMatchFailures) {
                          matchFailed("[0-9A-Fa-f]");
                        }
                      }
                    }
                  } else {
                    var result17 = null;
                  }
                  if (result17 !== null) {
                    var result14 = [result15, result16, result17];
                  } else {
                    var result14 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result14 = null;
                  pos = savedPos2;
                }
              } else {
                var result14 = null;
                pos = savedPos2;
              }
              var result13 = result14 !== null
                ? (function(hex) { return [16, hex.join('')] })(result14[2])
                : null;
              if (result13 !== null) {
                var result4 = result13;
              } else {
                var savedPos1 = pos;
                if (input.substr(pos, 1) === "0") {
                  var result10 = "0";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"0\"");
                  }
                }
                if (result10 !== null) {
                  if (input.substr(pos).match(/^[0-7]/) !== null) {
                    var result12 = input.charAt(pos);
                    pos++;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-7]");
                    }
                  }
                  if (result12 !== null) {
                    var result11 = [];
                    while (result12 !== null) {
                      result11.push(result12);
                      if (input.substr(pos).match(/^[0-7]/) !== null) {
                        var result12 = input.charAt(pos);
                        pos++;
                      } else {
                        var result12 = null;
                        if (reportMatchFailures) {
                          matchFailed("[0-7]");
                        }
                      }
                    }
                  } else {
                    var result11 = null;
                  }
                  if (result11 !== null) {
                    var result9 = [result10, result11];
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
                var result8 = result9 !== null
                  ? (function(oct) { return [8, oct.join('')] })(result9[1])
                  : null;
                if (result8 !== null) {
                  var result4 = result8;
                } else {
                  var result4 = null;;
                };
              };
            }
            if (result4 !== null) {
              var result5 = parse_ws();
              if (result5 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result7 = ";";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\";\"");
                  }
                }
                var result6 = result7 !== null ? result7 : '';
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(digits) { 
                var num = Number(parseInt(digits[1], digits[0])).toString(16);
                return {
                  "3c": "&lt;",
                  "3e": "&gt;",
                  "27": "&apos;",
                  //"60": "&#96;", // intended
                  "22": "&quot;"
                }[num]||"&#x" + num + ";";
              })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = 'number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result24 = "-";
          pos += 1;
        } else {
          var result24 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        var result2 = result24 !== null ? result24 : '';
        if (result2 !== null) {
          if (input.substr(pos).match(/^[0]/) !== null) {
            var result23 = input.charAt(pos);
            pos++;
          } else {
            var result23 = null;
            if (reportMatchFailures) {
              matchFailed("[0]");
            }
          }
          if (result23 !== null) {
            var result3 = result23;
          } else {
            var savedPos3 = pos;
            if (input.substr(pos).match(/^[1-9]/) !== null) {
              var result20 = input.charAt(pos);
              pos++;
            } else {
              var result20 = null;
              if (reportMatchFailures) {
                matchFailed("[1-9]");
              }
            }
            if (result20 !== null) {
              var result21 = [];
              var result22 = parse_digit();
              while (result22 !== null) {
                result21.push(result22);
                var result22 = parse_digit();
              }
              if (result21 !== null) {
                var result19 = [result20, result21];
              } else {
                var result19 = null;
                pos = savedPos3;
              }
            } else {
              var result19 = null;
              pos = savedPos3;
            }
            var result18 = result19 !== null
              ? (function(head, tail) { return head + tail.join('') })(result19[0], result19[1])
              : null;
            if (result18 !== null) {
              var result3 = result18;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result15 = ".";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result15 !== null) {
              var result17 = parse_digit();
              if (result17 !== null) {
                var result16 = [];
                while (result17 !== null) {
                  result16.push(result17);
                  var result17 = parse_digit();
                }
              } else {
                var result16 = null;
              }
              if (result16 !== null) {
                var result14 = [result15, result16];
              } else {
                var result14 = null;
                pos = savedPos2;
              }
            } else {
              var result14 = null;
              pos = savedPos2;
            }
            var result13 = result14 !== null
              ? (function(digit) { return "." + digit.join('') })(result14[1])
              : null;
            var result4 = result13 !== null ? result13 : '';
            if (result4 !== null) {
              var savedPos1 = pos;
              if (input.substr(pos).match(/^[eE]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[eE]");
                }
              }
              if (result8 !== null) {
                if (input.substr(pos).match(/^[+\-]/) !== null) {
                  var result12 = input.charAt(pos);
                  pos++;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("[+\\-]");
                  }
                }
                var result9 = result12 !== null ? result12 : '';
                if (result9 !== null) {
                  var result11 = parse_digit();
                  if (result11 !== null) {
                    var result10 = [];
                    while (result11 !== null) {
                      result10.push(result11);
                      var result11 = parse_digit();
                    }
                  } else {
                    var result10 = null;
                  }
                  if (result10 !== null) {
                    var result7 = [result8, result9, result10];
                  } else {
                    var result7 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
              var result6 = result7 !== null
                ? (function(sign, digits) { return "e" + sign + digits.join('') })(result7[1], result7[2])
                : null;
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(sign, pre, post, exp) { return sign + pre + post + exp })(result1[0], result1[1], result1[2], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_hex() {
        var cacheKey = 'hex@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9A-Fa-f]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9A-Fa-f]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_digit() {
        var cacheKey = 'digit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ws() {
        var cacheKey = 'ws@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\r\\n]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[ 	\\r\\n]");
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
